% same position, different run, different rep
% 
%  small =[0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0; ...
%          1     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0;...
%          1     1     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0;...
%          1     1     1     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0;...
%          1     1     1     1     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0;...
%          1     1     1     1     1     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0;...
%          1     1     1     1     1     1     0     0     0     0     0     0     0     0     0     0     0     0     0     0;...
%          1     1     1     1     1     1     1     0     0     0     0     0     0     0     0     0     0     0     0     0;...
%          1     1     1     1     1     1     1     1     0     0     0     0     0     0     0     0     0     0     0     0;...
%          1     1     1     1     1     1     1     1     1     0     0     0     0     0     0     0     0     0     0     0;...
%          0     1     1     1     1     1     1     1     1     1     0     0     0     0     0     0     0     0     0     0;...
%          1     0     1     1     1     1     1     1     1     1     1     0     0     0     0     0     0     0     0     0;...
%          1     1     0     1     1     1     1     1     1     1     1     1     0     0     0     0     0     0     0     0;...
%          1     1     1     0     1     1     1     1     1     1     1     1     1     0     0     0     0     0     0     0;...
%          1     1     1     1     0     1     1     1     1     1     1     1     1     1     0     0     0     0     0     0;...
%          1     1     1     1     1     0     1     1     1     1     1     1     1     1     1     0     0     0     0     0;...
%          1     1     1     1     1     1     0     1     1     1     1     1     1     1     1     1     0     0     0     0;...
%          1     1     1     1     1     1     1     0     1     1     1     1     1     1     1     1     1     0     0     0;...
%          1     1     1     1     1     1     1     1     0     1     1     1     1     1     1     1     1     1     0     0;...
%          1     1     1     1     1     1     1     1     1     0     1     1     1     1     1     1     1     1     1     0];   
     

small = all_between_seq_smallmask;
small = between_added_and_learned_seq_smallmask;
small = between_learnedonly_seq_smallmask;








 big = zeros(900,900);

% Get sizes
[rowsBig, columnsBig] = size(big);
[rowsSmall, columnsSmall] = size(small);
% Specify upper left row, column of where
% we'd like to paste the small matrix.
for iwin = 1:60:900 % Note change to iwin!!
    row1 = iwin;
    column1 = iwin;
    % Determine lower right location.
    row2 = row1 + rowsSmall - 1;
    column2 = column1 + columnsSmall - 1;
    % See if it will fit.
    if row2 <= rowsBig
        % It will fit, so paste it.
        big(row1:row2, column1:column2) = small;
    else
        % It won't fit
        warningMessage = sprintf('That will not fit.\nThe lower right coordinate would be at row %d, column %d.',...
            row2, column2);
        uiwait(warndlg(warningMessage));
    end
end % end iwin


mask = big;
between_learnedonly_seq_bigmask = logical(mask);
save('seqmtch_bt_run_mask.mat', 'mask');